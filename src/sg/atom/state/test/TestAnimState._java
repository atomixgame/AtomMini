package sg.games.cuteheroes.state.test;

import com.jme3.app.Application;
import com.jme3.app.state.AbstractAppState;
import com.jme3.app.state.AppStateManager;
import com.jme3.asset.AssetManager;
import com.jme3.scene.Node;
import java.util.logging.Logger;
import sg.games.cuteheroes.CuteHeroesMain;
import sg.games.cuteheroes.gameplay.GameCharacter;
import sg.games.cuteheroes.stage.StageManager;
import sg.games.cuteheroes.state.GameStateManager;
import sg.games.cuteheroes.state.InGameState;
import sg.games.cuteheroes.ui.GUIManager;

/**
 *
 * @author cuong.nguyenmanh2
 */
public class TestAnimState extends AbstractAppState {

    private CuteHeroesMain app;
    private Node rootNode;
    private AssetManager assetManager;
    private AppStateManager stateManager;
    private GameStateManager gameStateManager;
    private static final Logger logger = Logger.getLogger(InGameState.class.getName());
    private GUIManager gameGUIManager;
    private StageManager stageManager;
    private boolean gamePause;

    @Override
    public void initialize(AppStateManager stateManager, Application app) {
        super.initialize(stateManager, app);
        this.app = (CuteHeroesMain) app; // can cast Application to something more specific

        this.rootNode = this.app.getRootNode();
        this.assetManager = this.app.getAssetManager();
        this.stateManager = this.app.getStateManager();
        this.gameStateManager = this.app.getGameStateManager();

//        if (this.app.getGameGUIManager() == null) {
//            this.app.initGUI();
//        }

        this.gameGUIManager = this.app.getGUIManager();

//        if (this.app.getStageManager() == null) {
//            this.app.initStage();
//        }
        this.stageManager = this.app.getStageManager();

        setEnabled(true);

    }

    public void setupInputs() {
    }

    public void createCharacters() {
    }

    public void selectCharacter(GameCharacter gameCharacter) {
    }

    @Override
    public void setEnabled(boolean enabled) {
        super.setEnabled(enabled);

        if (enabled) {
        } else {
        }
    }

    @Override
    public void update(float tpf) {
        super.update(tpf);

        if (!gamePause) {
            getGameGUIManager().simpleUpdate(tpf);
            getStageManager().simpleUpdate(tpf);
        }
    }

    /* Setter getter */
    /* Shortcuts */
    public GUIManager getGameGUIManager() {
        return gameGUIManager;
    }

    public StageManager getStageManager() {
        return stageManager;
    }
}
